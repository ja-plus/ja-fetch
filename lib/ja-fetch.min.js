function e(e,t){const r=t.params;if(r&&(e=function(e,t){let r=new URL(e,window.location);for(const e in t)r.searchParams.append(e,t[e]);return r.href}(e,r)),t.body&&!(t.body instanceof FormData)&&"object"==typeof t.body){t.headers=Object.assign({"Content-Type":"application/json"},t.headers||{});try{t.body=JSON.stringify(t.body)}catch(e){throw new Error("cannot stringify body json")}}return t.credentials||(t.credentials="same-origin"),fetch(e,t)}class t{store=[];use(e,t){if(e&&"function"!=typeof e)throw new TypeError("interceptor.use(onFulfilled, onRejected), parameter onFulfilled is not a function");if(t&&"function"!=typeof t)throw new TypeError("interceptor.use(onFulfilled, onRejected), parameter onRejected is not a function");this.onFulfilled=e,this.onRejected=t;const r=Date.now();return this.store.push({id:r,onFulfilled:e,onRejected:t}),r}remove(e){e?this.store=this.store.filter((t=>t.id===e)):(console.warn("Remove all Interceptor"),this.store=[])}}class r{request=new t;response=new t;use(e){const t=new r;e.install(t),t.request.store.forEach((e=>{this.request.use(e.onFulfilled,e.onRejected)})),t.response.store.forEach((e=>{this.response.use(e.onFulfilled,e.onRejected)}))}create(){return new r}}class o{#e={headers:{}};interceptors=new r;constructor(e){this.#e=Object.assign({},this.#e,e)}create(e){return new o(e)}#t(t,r){const o=this.interceptors.request,n=this.interceptors.response;let s=Object.assign({},this.#e,r);return o.store.length&&(s.headers||(s.headers={}),o.store.forEach((e=>{let r=e.onFulfilled(t,s);r&&(s=r)}))),e(t,s).then((e=>{if(e.ok){const t=s.responseType;let r;return r="blob"===t?e.blob():"text"===t?e.text():"arraybuffer"===t?e.arrayBuffer():"response"===t?e:e.json(),n.store.forEach((t=>{r=r.then((r=>t.onFulfilled(r,s,e)),(e=>t.onRejected?t.onRejected(e):Promise.reject(e)))})),r}{const t={msg:`res status:${e.status}`,config:s};let r=Promise.reject(t);return n.store.forEach((e=>{r=r.catch(e.onRejected).then((e=>e instanceof Promise?e:(console.warn("response.interceptor.use(onFulfilled, onRejected): onRejected function not return Promise. Use Promise.reject() to jump to next response interceptor's onRejected Function"),Promise.reject(t))))})),r}}),(e=>{const t={err:e,config:s};let r=Promise.reject(t);return o.store.forEach((e=>{r=r.catch(e.onRejected).then((e=>e instanceof Promise?e:(console.warn("request.interceptor.use(onFulfilled, onRejected): onRejected function not return Promise. Use Promise.reject() to jump to next request interceptor's onRejected Function"),Promise.reject(t))))})),r}))}get(e,t={}){return t.method="GET",this.#t(e,t)}post(e,t={}){return t.method="POST",this.#t(e,t)}put(e,t={}){return t.method="PUT",this.#t(e,t)}del(e,t={}){return t.method="DELETE",this.#t(e,t)}}let n=new o;export{n as default};
//# sourceMappingURL=ja-fetch.min.js.map
